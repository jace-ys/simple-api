// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"sync"

	"github.com/jace-ys/simple-api/domain"
)

type FakeMoviesService struct {
	GetMovieStub        func(context.Context, int) (*domain.Movie, error)
	getMovieMutex       sync.RWMutex
	getMovieArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	getMovieReturns struct {
		result1 *domain.Movie
		result2 error
	}
	getMovieReturnsOnCall map[int]struct {
		result1 *domain.Movie
		result2 error
	}
	GetMoviesStub        func(context.Context) (domain.Movies, error)
	getMoviesMutex       sync.RWMutex
	getMoviesArgsForCall []struct {
		arg1 context.Context
	}
	getMoviesReturns struct {
		result1 domain.Movies
		result2 error
	}
	getMoviesReturnsOnCall map[int]struct {
		result1 domain.Movies
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMoviesService) GetMovie(arg1 context.Context, arg2 int) (*domain.Movie, error) {
	fake.getMovieMutex.Lock()
	ret, specificReturn := fake.getMovieReturnsOnCall[len(fake.getMovieArgsForCall)]
	fake.getMovieArgsForCall = append(fake.getMovieArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.GetMovieStub
	fakeReturns := fake.getMovieReturns
	fake.recordInvocation("GetMovie", []interface{}{arg1, arg2})
	fake.getMovieMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMoviesService) GetMovieCallCount() int {
	fake.getMovieMutex.RLock()
	defer fake.getMovieMutex.RUnlock()
	return len(fake.getMovieArgsForCall)
}

func (fake *FakeMoviesService) GetMovieCalls(stub func(context.Context, int) (*domain.Movie, error)) {
	fake.getMovieMutex.Lock()
	defer fake.getMovieMutex.Unlock()
	fake.GetMovieStub = stub
}

func (fake *FakeMoviesService) GetMovieArgsForCall(i int) (context.Context, int) {
	fake.getMovieMutex.RLock()
	defer fake.getMovieMutex.RUnlock()
	argsForCall := fake.getMovieArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMoviesService) GetMovieReturns(result1 *domain.Movie, result2 error) {
	fake.getMovieMutex.Lock()
	defer fake.getMovieMutex.Unlock()
	fake.GetMovieStub = nil
	fake.getMovieReturns = struct {
		result1 *domain.Movie
		result2 error
	}{result1, result2}
}

func (fake *FakeMoviesService) GetMovieReturnsOnCall(i int, result1 *domain.Movie, result2 error) {
	fake.getMovieMutex.Lock()
	defer fake.getMovieMutex.Unlock()
	fake.GetMovieStub = nil
	if fake.getMovieReturnsOnCall == nil {
		fake.getMovieReturnsOnCall = make(map[int]struct {
			result1 *domain.Movie
			result2 error
		})
	}
	fake.getMovieReturnsOnCall[i] = struct {
		result1 *domain.Movie
		result2 error
	}{result1, result2}
}

func (fake *FakeMoviesService) GetMovies(arg1 context.Context) (domain.Movies, error) {
	fake.getMoviesMutex.Lock()
	ret, specificReturn := fake.getMoviesReturnsOnCall[len(fake.getMoviesArgsForCall)]
	fake.getMoviesArgsForCall = append(fake.getMoviesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetMoviesStub
	fakeReturns := fake.getMoviesReturns
	fake.recordInvocation("GetMovies", []interface{}{arg1})
	fake.getMoviesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMoviesService) GetMoviesCallCount() int {
	fake.getMoviesMutex.RLock()
	defer fake.getMoviesMutex.RUnlock()
	return len(fake.getMoviesArgsForCall)
}

func (fake *FakeMoviesService) GetMoviesCalls(stub func(context.Context) (domain.Movies, error)) {
	fake.getMoviesMutex.Lock()
	defer fake.getMoviesMutex.Unlock()
	fake.GetMoviesStub = stub
}

func (fake *FakeMoviesService) GetMoviesArgsForCall(i int) context.Context {
	fake.getMoviesMutex.RLock()
	defer fake.getMoviesMutex.RUnlock()
	argsForCall := fake.getMoviesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMoviesService) GetMoviesReturns(result1 domain.Movies, result2 error) {
	fake.getMoviesMutex.Lock()
	defer fake.getMoviesMutex.Unlock()
	fake.GetMoviesStub = nil
	fake.getMoviesReturns = struct {
		result1 domain.Movies
		result2 error
	}{result1, result2}
}

func (fake *FakeMoviesService) GetMoviesReturnsOnCall(i int, result1 domain.Movies, result2 error) {
	fake.getMoviesMutex.Lock()
	defer fake.getMoviesMutex.Unlock()
	fake.GetMoviesStub = nil
	if fake.getMoviesReturnsOnCall == nil {
		fake.getMoviesReturnsOnCall = make(map[int]struct {
			result1 domain.Movies
			result2 error
		})
	}
	fake.getMoviesReturnsOnCall[i] = struct {
		result1 domain.Movies
		result2 error
	}{result1, result2}
}

func (fake *FakeMoviesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMovieMutex.RLock()
	defer fake.getMovieMutex.RUnlock()
	fake.getMoviesMutex.RLock()
	defer fake.getMoviesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMoviesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.MoviesService = new(FakeMoviesService)
