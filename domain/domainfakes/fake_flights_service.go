// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"sync"

	"github.com/jace-ys/simple-api/domain"
)

type FakeFlightsService struct {
	GetFlightsStub        func(context.Context, string, string, string) (domain.DuffelFlights, error)
	getFlightsMutex       sync.RWMutex
	getFlightsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getFlightsReturns struct {
		result1 domain.DuffelFlights
		result2 error
	}
	getFlightsReturnsOnCall map[int]struct {
		result1 domain.DuffelFlights
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlightsService) GetFlights(arg1 context.Context, arg2 string, arg3 string, arg4 string) (domain.DuffelFlights, error) {
	fake.getFlightsMutex.Lock()
	ret, specificReturn := fake.getFlightsReturnsOnCall[len(fake.getFlightsArgsForCall)]
	fake.getFlightsArgsForCall = append(fake.getFlightsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetFlightsStub
	fakeReturns := fake.getFlightsReturns
	fake.recordInvocation("GetFlights", []interface{}{arg1, arg2, arg3, arg4})
	fake.getFlightsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFlightsService) GetFlightsCallCount() int {
	fake.getFlightsMutex.RLock()
	defer fake.getFlightsMutex.RUnlock()
	return len(fake.getFlightsArgsForCall)
}

func (fake *FakeFlightsService) GetFlightsCalls(stub func(context.Context, string, string, string) (domain.DuffelFlights, error)) {
	fake.getFlightsMutex.Lock()
	defer fake.getFlightsMutex.Unlock()
	fake.GetFlightsStub = stub
}

func (fake *FakeFlightsService) GetFlightsArgsForCall(i int) (context.Context, string, string, string) {
	fake.getFlightsMutex.RLock()
	defer fake.getFlightsMutex.RUnlock()
	argsForCall := fake.getFlightsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeFlightsService) GetFlightsReturns(result1 domain.DuffelFlights, result2 error) {
	fake.getFlightsMutex.Lock()
	defer fake.getFlightsMutex.Unlock()
	fake.GetFlightsStub = nil
	fake.getFlightsReturns = struct {
		result1 domain.DuffelFlights
		result2 error
	}{result1, result2}
}

func (fake *FakeFlightsService) GetFlightsReturnsOnCall(i int, result1 domain.DuffelFlights, result2 error) {
	fake.getFlightsMutex.Lock()
	defer fake.getFlightsMutex.Unlock()
	fake.GetFlightsStub = nil
	if fake.getFlightsReturnsOnCall == nil {
		fake.getFlightsReturnsOnCall = make(map[int]struct {
			result1 domain.DuffelFlights
			result2 error
		})
	}
	fake.getFlightsReturnsOnCall[i] = struct {
		result1 domain.DuffelFlights
		result2 error
	}{result1, result2}
}

func (fake *FakeFlightsService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFlightsMutex.RLock()
	defer fake.getFlightsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlightsService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.FlightsService = new(FakeFlightsService)
